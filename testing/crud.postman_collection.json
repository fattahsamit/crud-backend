{
	"info": {
		"_postman_id": "c7fa793f-1708-48ee-b1bc-51b19db87a5b",
		"name": "crud",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28308550",
		"_collection_link": "https://www.postman.com/universal-zodiac-887192/workspace/showcase/collection/28308550-c7fa793f-1708-48ee-b1bc-51b19db87a5b?action=share&source=collection_link&creator=28308550"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{local}}",
							"host": [
								"{{local}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each product has required fields\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((product) => {\r",
									"        pm.expect(product).to.have.property(\"name\");\r",
									"        pm.expect(product).to.have.property(\"quantity\");\r",
									"        pm.expect(product).to.have.property(\"price\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{local}}/api/products?limit=2",
							"host": [
								"{{local}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find product by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a valid product\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"quantity\");\r",
									"    pm.expect(jsonData).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"pm.test(\"The product has a valid price and quantity\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.price).to.be.a('number');\r",
									"    pm.expect(jsonData.quantity).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{local}}/api/products/{{product}}",
							"host": [
								"{{local}}"
							],
							"path": [
								"api",
								"products",
								"{{product}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const product = response._id;\r",
									"pm.collectionVariables.set(\"product\", product);\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"    const schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            name: {\r",
									"                type: 'string',\r",
									"            },\r",
									"            quantity: {\r",
									"                type: 'number', \r",
									"            },\r",
									"            price: {\r",
									"                type: 'number', \r",
									"            },\r",
									"            image: {\r",
									"                type: 'string',\r",
									"              \r",
									"            },\r",
									"            _id: {\r",
									"                type: 'string',\r",
									"                pattern: '^[0-9a-fA-F]{24}$' \r",
									"            },\r",
									"            createdAt: {\r",
									"                type: 'string',\r",
									"                format: 'date-time' \r",
									"            },\r",
									"            updatedAt: {\r",
									"                type: 'string',\r",
									"                format: 'date-time'\r",
									"            },\r",
									"            __v: {\r",
									"                type: 'number', \r",
									"            },\r",
									"        },\r",
									"        required: ['name', 'quantity', 'price'],\r",
									"        additionalProperties: false\r",
									"    };\r",
									"    \r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Digital Camera\",\r\n    \"quantity\": 12,\r\n    \"price\": 25.25,\r\n    \"image\": \"https://images.pexels.com/photos/90946/pexels-photo-90946.jpeg?cs=srgb&dl=pexels-madebymath-90946.jpg&fm=jpg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local}}/api/products",
							"host": [
								"{{local}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"    const schema = {\r",
									"        type: 'object',\r",
									"        properties: {\r",
									"            name: {\r",
									"                type: 'string',\r",
									"            },\r",
									"            quantity: {\r",
									"                type: 'number', \r",
									"            },\r",
									"            price: {\r",
									"                type: 'number', \r",
									"            },\r",
									"            image: {\r",
									"                type: 'string',\r",
									"              \r",
									"            },\r",
									"            _id: {\r",
									"                type: 'string',\r",
									"                pattern: '^[0-9a-fA-F]{24}$' \r",
									"            },\r",
									"            createdAt: {\r",
									"                type: 'string',\r",
									"                format: 'date-time' \r",
									"            },\r",
									"            updatedAt: {\r",
									"                type: 'string',\r",
									"                format: 'date-time'\r",
									"            },\r",
									"            __v: {\r",
									"                type: 'number', \r",
									"            },\r",
									"        },\r",
									"        required: ['name', 'quantity', 'price'],\r",
									"        additionalProperties: false\r",
									"    };\r",
									"    \r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Updated Camera\",\r\n    \"quantity\": 55,\r\n    \"price\": 125.25,\r\n    \"image\": \"https://img.freepik.com/premium-psd/product-showcase-background_597316-255.jpg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local}}/api/products/{{product}}",
							"host": [
								"{{local}}"
							],
							"path": [
								"api",
								"products",
								"{{product}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains a deletion message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Product deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{local}}/api/products/{{product}}",
							"host": [
								"{{local}}"
							],
							"path": [
								"api",
								"products",
								"{{product}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "local",
			"value": "",
			"type": "string"
		},
		{
			"key": "product",
			"value": "",
			"type": "string"
		}
	]
}